<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Jupyter 导出高清 Matplotlib 图片</title>
      <link href="/2020/11/01/2020-11-01-jupyter-dao-chu-gao-qing-matplotlib-tu-pian/"/>
      <url>/2020/11/01/2020-11-01-jupyter-dao-chu-gao-qing-matplotlib-tu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="Jupyter-导出高清-Matplotlib-图片"><a href="#Jupyter-导出高清-Matplotlib-图片" class="headerlink" title="Jupyter 导出高清 Matplotlib 图片"></a>Jupyter 导出高清 Matplotlib 图片</h2><p>Jupyter notebook 中如果使用 <code>%matplotlib inline</code> 来显示 Matplotlib 输出的话，效果很差很模糊。</p><p>如果用 <code>%matplotlib notebook</code> 的方式的话，Matplotlib 输出会以 Widget 的形式呈现，效果会好很多。</p><p>不过问题是当我们导出到 PDF 或 html 时，这些 Widget 竟然没有了，查阅了大量 Issue 后发现要保存 Widget state 或者关闭所有 widget 才行，总之一顿操作后，依然没成功…</p><p>最后终于在一个博客[1] 中找到了一个靠谱的答案：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> mpl<span class="token operator">%</span>matplotlib inlinempl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.dpi'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">300</span><span class="token keyword">from</span> IPython<span class="token punctuation">.</span>display <span class="token keyword">import</span> set_matplotlib_formatsset_matplotlib_formats<span class="token punctuation">(</span><span class="token string">'png'</span><span class="token punctuation">,</span> <span class="token string">'pdf'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原理很简单，就是告诉 Jupyter 同时保存 png 和 pdf 格式的 Matplotlib 输出。</p><p>这样在 Jupyter notebook 中就用 png 格式的内容显示，然后导出到 PDF (by LaTeX) 的时候就直接用矢量图的 pdf 图。</p><p>同时，inline 模式下，Matplotlib 输出的 png 图像实在时模糊，所以我们需要简单修改下  dpi 为 300，不过这样保存到文件的时候会占用更加大的空间（都 2020 年了，也不用在乎这点空间吧）。</p><p>最后，Jupyter notebook 通过 LaTeX 导出到 PDF 需要 Pandoc 和 TeX (推荐 MikTeX) 依赖。</p><p>不过在带有中文的 Jupyter notebook 导出成 PDF 时，中文字符都会出问题，这是因为 Jupyter notebook 的 LaTeX 模板默认不支持中文。</p><p>所以我们只需要简单的修改下模板文件 <code>../nbconvert/templates/latex/base.tex.j2</code> (不同 Jupyter 版本可能在不同文件哦），加入 <code>ctex</code> 包 （<code>\usepackage{ctex}</code>) 就好啦。</p><blockquote><p>啊，就这样水了一篇博客~</p></blockquote><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li>[1] <a href="http://blog.rtwilson.com/how-to-get-nice-vector-graphics-in-your-exported-pdf-ipython-notebooks/" target="_blank" rel="noopener">Robin’s Blog</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jupyter </tag>
            
            <tag> Matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chromebook 折腾记之二</title>
      <link href="/2019/12/13/2019-12-11-chromebook-zhe-teng-ji-zhi-er/"/>
      <url>/2019/12/13/2019-12-11-chromebook-zhe-teng-ji-zhi-er/</url>
      
        <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>前面提到过在旧款 chromebook 上折腾 chromefy 的故事, 最近我这里有台新的 Windows 笔记本 (HP 笔记本, 而且竟然带一个小黑点(山寨 ThinkPad 小红点)). 鉴于之前的 chromebook 没有 vmx 支持, 我准备继续在这台笔记本上折腾 Chrome OS, 主要是 crouton 和 crostini.</p><p>电脑配置如下:</p><pre><code>Model: HP EliteBook 820 G3/807CIntel Core i7-6500U CPU @ 3.1GHz8GB DDR4256G SSD14 inch 1080P 屏幕</code></pre><p>配置还是很不错的, 而且足够轻薄, 续航也够用.</p><h1 id="多系统-Windows"><a href="#多系统-Windows" class="headerlink" title="多系统 (Windows)"></a>多系统 (Windows)</h1><p>因为 Chrome OS 的 disk partition layout 比较特殊, 所以如果 layout 不符合要求会进不去系统的.</p><p>安装多系统的思路主要是:</p><ul><li>先安装 Chrome OS, 并且把 STATE 部分缩小腾出空间, 注意缩小 STATE 后需要把整个 STATE 分区格式化一次, 不然无法开机(开机自动进入修复界面, 这个东西应该是 <code>write_gpt.sh</code> 之类的东西负责检查的)</li><li>把 ROOT-C 或 KERNEL-C 的空间扩大 (ESP 分区我也扩大了, 原来太小了)</li><li>安装 Windows 到上述分区, 注意 Windows 特别喜欢重新调整分区表的顺序 (安装扇区顺序)… 打乱分区顺序后 Chrome OS 将无法进入. 直接使用 <code>sfdisk -d /dev/sda &gt; sda.bkp</code> 暴力修改顺序再 <code>sfdisk /dev/sda &lt; sda.bkp</code></li><li>在 Windows 中可以使用 EasyUEFI 更改启动顺序或者在 BIOS 里面改</li></ul><h1 id="Grub-启动问题"><a href="#Grub-启动问题" class="headerlink" title="Grub 启动问题"></a>Grub 启动问题</h1><p>Chromebook 使用的是 coreboot, 并且开机加载的是 kernel blob (Partition 2 或 4 之类的, kernel blob 里面包含一个有 bootloader, kernel config 和 kernel image 的一个 device tree, 并且 blob 头会做加密校验, 内容当然也是加密的) 而不是 grub, 所以到了我这台 Windows 笔记本上只能用 grub 了.</p><p>而且我这默认 grub 的配置进不去系统, 所以需要做一下修改 (<code>ESP:/EFI/ChromeOS/grub.cfg</code> 或 <code>ESP:/EFI/Boot/grub.cfg</code>):</p><pre><code>menuentry &quot;Chrome OS&quot; {  insmod ext2  insmod part_gpt  set root=(hd0,gpt3)  linux /boot/vmlinuz-4.14.120 init=/sbin/init boot=local rootwait ro noresume noswap loglevel=7 noinitrd console=  i915.modeset=1 dm_verity.dev_wait=0 cros_legacy cros_debug loadpin.enabled=0      root=/dev/sda3}</code></pre><blockquote><p>/dev/sda3 对应 ROOT-A 分区, 且内核参数与 Chrome OS 默认的有许多出入之处.</p></blockquote><h1 id="Crouton"><a href="#Crouton" class="headerlink" title="Crouton"></a>Crouton</h1><blockquote><p>安装 Crouton 容器的 xorg target 需要从 google 服务器(被 gfw ban 了)下载 adhd.tar.gz, 所以如果没有解决代理需要手动下载并更改容器里面的 prepare.sh 相关内容.</p></blockquote><p><code>Crouton</code> 就是一个 <code>chroot</code> + 自己实现了一个 <code>xorg server</code> 可以把 GUI 应用显示在 chrome tab 中的 <code>xiwi</code> + 可以运行在 <code>freon</code> 的 xorg ( <code>frecon</code> 是 chromium project 做的一个 tty 终端模拟器, crouton 的 xorg 可以运行整个 desktop environment 在 tty2, 自带 gpu 加速, 甚至感觉比 chrome os 的 DE 还流畅hhh) + 自动挂载一些目录（最重要的 /var/run 用于共享 host 的 dbus 之类的东西, tmp，~/Downloads…) + 剪贴板共享 + Audio （CARS）等等</p><p>在上一篇博文中提到过 crouton 的缺陷:</p><blockquote><p>来自 chroot 的缺陷 (弊端, 不能算 Issues):</p><p>• 因为只有 filesystem 级别的 isolate，所以进程 PID=1 已经被 chromeOS 的 <code>upstart</code> 占用而不能使用 <code>systemd</code> （可以使用容器技术解决，linux&gt;=3.10）<br>• 没办法创建虚拟网卡，所以 docker 无法使用（或者说只能工作在 <code>net=host</code> 上），可以尝试用 <code>rtk</code>（也是必须 net=host）<br>• 内核模块需要加载的话，因为没有 <code>linux-header</code>，所以必须去 chromium project 找到当前内核使用的那个源码树的那个 commit</p></blockquote><p>折腾了一下之后发现最后只剩下 init 的问题了, init 是 upstart 不是 systemd 有点不方便.</p><p>linux-header, dkms 编译内核及其加载, kvm 和 virtualbox 的问题都搞定了.</p><p>kvm 因为 crostini 需要用到, 所以默认就有, 只不过有 <code>/dev/kvm</code> 的权限问题 (Crouton 下 <code>sudo</code> 运行然后 libvirt 用户组记得添加即可). 在更加久远之前的 Chrome OS 可能需要在 bootloader 里面加入内核启动参数 <code>disablevmx=off</code>.</p><p>测试下 kvm:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> xiwi qemu-system-x86_64 -boot d -enable-kvm -cdrom ./archlinux-2019.12.01-x86_64.iso -m 1024 -cpu kvm64 -smp 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="rkt-容器的使用"><a href="#rkt-容器的使用" class="headerlink" title="rkt 容器的使用"></a>rkt 容器的使用</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> rkt run --no-overlay<span class="token operator">=</span>true --insecure-options<span class="token operator">=</span>image docker://alpine --net<span class="token operator">=</span>host --interactive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>主要是网卡只能用 <code>host</code>, <code>overlay</code> 也似乎不支持.</p></blockquote><h2 id="linux-header-及-VirtualBox"><a href="#linux-header-及-VirtualBox" class="headerlink" title="linux-header 及 VirtualBox"></a>linux-header 及 VirtualBox</h2><blockquote><p>Chromium OS 因为稍微有点小众, 许多资料其实都已经过时了.</p></blockquote><p>首先编译内核获得头文件, 这一步按照 Crouton 的 wiki 走下去就差不多了, 不过有几点需要注意的地方:</p><ul><li>Chromefy 后保留的是 chromium 镜像的内核, 而不是 chrome OS 恢复镜像里面的, 所以对应去 chromium os 所在版本 (e.g. 我这里是 R76, 而 chrome OS 是 R75) 对应的 Branch 去找, 记得注意小版本号和版本号里面的 git hash (如有).</li><li>编译内核直接使用当前内核配置: <code>sudo modprobe configs &amp;&amp; zless /proc/config.gz &gt; $KERNEL_REPO/.config</code></li><li>Chrome OS 使用比较严格的安全策略(SELinux, 禁止加载其他内核模块(文档里面说以后将可能完全禁止…)), 所以编译好的 virtualbox 内核模块会被 LoadPin 策略禁止加载 (R75 时是 LoadPin 了, 文档里面依然只有之前版本使用过的 lsm.module_locking=0 来取消禁止), 所以需要在 bootloader (i.e. grub) 里面取消该限制: <code>loadpin.enabled=0</code></li></ul><p>大致过程:</p><p>使用 <a href="https://chromium.googlesource.com/chromiumos/third_party/kernel/+/refs/heads/release-R76-12239.B-chromeos-4.14" target="_blank" rel="noopener">release-R76-12239.B-chromeos-4.14</a> 这一个 repo.</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># repo 根目录下</span>./chromeos/scripts/prepareconfig chromeos-intel-pineview <span class="token comment" spellcheck="true"># 似乎可以不需要</span><span class="token function">sudo</span> modprobe configs <span class="token operator">&amp;&amp;</span> zless /proc/config.gz <span class="token operator">></span> <span class="token variable">$KERNEL_REPO</span>/.config<span class="token comment" spellcheck="true"># make kernelrelease 确认下</span><span class="token function">touch</span> REPORTING-BUGS <span class="token comment" spellcheck="true"># 缺少该文件, deb 打包会报错</span><span class="token function">sudo</span> make-kpkg --rootcmd fakeroot kernel_image kernel_headers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Crouton 容器中修改 rc.local 使之启动的时候解除 /lib/modules 的挂载, 以免容器内对内核模块的操作影响 host:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span> -e<span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># rc.local</span><span class="token comment" spellcheck="true"># umount bindmounts /lib/modules from enter-chroot</span><span class="token keyword">for</span> m <span class="token keyword">in</span> `cat /proc/mounts <span class="token operator">|</span> /usr/bin/cut -d <span class="token string">' '</span> -f2 <span class="token operator">|</span> <span class="token function">grep</span> /lib/modules<span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">"^/$"</span> `<span class="token punctuation">;</span> <span class="token keyword">do</span>        <span class="token function">umount</span> <span class="token string">"<span class="token variable">$m</span>"</span><span class="token keyword">done</span><span class="token comment" spellcheck="true"># try to load vboxdrv modules</span><span class="token keyword">if</span> <span class="token punctuation">[</span> `find /lib/modules/<span class="token string">"\<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -r\<span class="token variable">`</span></span>"</span> -name vboxdrv.ko` <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token comment" spellcheck="true"># check if loadpin is disabled</span>    <span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">grep</span> -q <span class="token string">"laodpin.enabled=0"</span> /proc/cmdline<span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">exit</span> 0    <span class="token keyword">fi</span>    modprobe vboxdrv    modprobe vboxpci    modprobe vboxnetadp    modprobe vboxnetflt<span class="token keyword">fi</span><span class="token keyword">exit</span> 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Oracle VBox 在 crouton 退出时依然运行着内核模块, 需要手动卸载:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> /sbin/rmmod vboxpci <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> rmmod vboxnetadp <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> rmmod vboxnetflt <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> rmmod vboxdrv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以编译好 <code>linux-image.*.deb</code> 和  <code>linux-header.*.deb</code> 后先不要马上安装, 先确保卸载掉之前 bind mount 的 /lib/modules.</p><p>VirtualBox 效果图:</p><p><img src="/assets/chromefy/vbox.png" alt="vbox.png"></p><blockquote><p>值得注意的是我发现也许是 <code>crostini</code> 与同样需要使用 <code>kvm</code> 的 Oracle VBox 冲突, <code>crostini</code> 所在的 <code>termina</code> 如果正在运行的话, Oracle VBox 将无法启动. 需要使用 <code>vmc stop termina</code> (在 <code>crosh</code> 中) 停止 <code>termina</code>, 而有趣的是 <code>qemu with kvm</code> 并不会与 <code>termina</code> 冲突.</p></blockquote><h2 id="ubuntu-16-04-xenial-折腾记"><a href="#ubuntu-16-04-xenial-折腾记" class="headerlink" title="ubuntu 16.04 (xenial) 折腾记"></a>ubuntu 16.04 (xenial) 折腾记</h2><p>因为 Crouton 推荐用的是 xenial (应该是支持的比较好, bug 少点), 所以就直接用用了 xenial:</p><p><img src="/assets/chromefy/xenial.png" alt="xenial.png"></p><p>Gnome 3.18 还是那个保留了 status icon bar 的版本, 真香啊, 而且没 bug 没插件的时候 Gnome 真流畅.</p><p>使用过程中遇到了点问题:</p><ul><li><p>Gnome3/GTK3 版本太老了.. <code>adapta-gtk-theme</code> 现在最低要求 gnome 3.20… 自己编译了下 (sassc 需要自己编译, <a href="https://github.com/sass/sassc/blob/master/docs/building/unix-instructions.md" target="_blank" rel="noopener">参考</a>)发现动画没了, 画的也有问题… 所以准备用 ppa 安装一个新一点的版本的 Gnome3.</p></li><li><p>Audio 和屏幕亮度调节有问题, 我记得 Crouton 是搞定了这些的, 到时候再折腾下.</p></li><li><p>Gnome 开发的几个垃圾程序的 bug 导致桌面特别卡:</p><ul><li><p>文件索引导致的 high cpu usage: 可以去 setting 关掉, 我直接用下面的脚本屏蔽了这些扫描 (<a href="https://gist.github.com/vancluever/d34b41eb77e6d077887c" target="_blank" rel="noopener">Ref at gist</a>)</p></li><li><p>备份 (Deja) 莫名其妙 high cpu usage, 明明我是关闭的, 直接卸载: <code>sudo apt remove deja-dup*</code></p></li><li><p>Gnome-software high cpu usage: 文件权限问题<code>sudo chown -R &lt;USER&gt; /home/&lt;USER&gt;/.cache/dconf</code></p></li></ul></li></ul><pre class="line-numbers language-bash"><code class="language-bash">tracker daemon -t<span class="token function">cd</span> ~/.config/autostart<span class="token function">cp</span> -v /etc/xdg/autostart/tracker-*.desktop ./<span class="token keyword">for</span> FILE <span class="token keyword">in</span> tracker-*.desktop<span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token keyword">echo</span> Hidden<span class="token operator">=</span>true <span class="token operator">>></span> <span class="token variable">$FILE</span><span class="token punctuation">;</span> <span class="token keyword">done</span><span class="token function">rm</span> -rf ~/.cache/tracker ~/.local/share/tracker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>反映出 gnome 写出来的程序真的很多 sucks 的…</p></blockquote><h1 id="Crostini"><a href="#Crostini" class="headerlink" title="Crostini"></a>Crostini</h1><p>参考 <a href="https://wiki.archlinux.org/index.php/Chrome_OS_devices/Crostini" target="_blank" rel="noopener">Arch Wiki</a> 安装 Archlinux 作为默认容器.</p><p>因为我现在的 Chrome OS 的版本是 R75, 到了 R77 才支持 gpu 加速, 而 R77 的 ARC 的网络代理出问题了, 而 R78 的恢复镜像当时还没出, 所以有空升级到 R78 去.</p><blockquote><p>当时第一次进入 <code>Chromium OS</code> 的 tty 终端的时候, 发现可以用 <code>journal</code> 还以为 init 换成了 <code>systemd</code>, 结果白高兴一场, 依然是 <code>upstart</code>. 不过 <code>Chromium OS</code> 现在 (至少 R75 开始)的 tty (<code>frecon</code>) 默认是大字体了, 看着很舒服, 比 Arch Linux 默认 tty 字体大小舒服多了哈哈哈.</p></blockquote><p>发现几个值得一提的事:</p><ul><li>Chromium project 为了增强安全性和隔离性, 所以使用 crostini 跑在 kvm (他们的 wiki 说 overhead 很小) 里面的最小化 linux 环境里面再跑 lxc 容器, 其中跑的 linux 内核是不同于 chrome os 的, 甚至更加注重安全的版本(hardended 版本).</li><li>只有默认容器 penguin 才能跑 sommelier</li><li>Chrome OS 开机时默认不加载 Crostini 的, 因为 kvm 虚拟机启动还是有点费时间,以及为了安全性考虑 在 termina (Chrome OS 里面唯一能够运行的 KVM 虚拟机) 启动之前先启动  ARC 的 ss 软件, crostini 的网卡默认就会走代理了.</li><li>crostini 出问题时 (e.g. 闪退) 万能方法: 在 Crosh (Ctrl+alt+F2 进去不要输入 shell)里面 <code>vsh stop termina &amp;&amp; vsh start termina</code> 重启大法.</li><li>Chrome OS 默认 iptable 规则比较严格, 局域网想访问 crostini 里面的 docker 运行的服务需要做一下端口转发 (把 host 的流量转发到容器) 并且修改 iptable 规则 (<code>sudo iptables -I OUTPUT -o wlan0 -j ACCEPT &amp;&amp; sudo iptables -I INPUT -i wlan0 -j ACCEPT</code>).</li></ul><blockquote><p>In a nutshell, sommelier 真香!</p></blockquote><p>在 crostini 中运行完整桌面可以用 <code>x11docker</code> (配合 <code>weston</code>):</p><p>先输入<code>weston</code> 进入其桌面的终端, 输入 <code>x11docker --desktop --gpu --user=root --init=systemd --fullscreen x11docker/gnome</code></p><blockquote><p>在没有显卡加速的 R75 上略卡, 可以试试以后用 <code>chromebrew</code> 在 <code>frecon</code> 中使用  <code>weston</code> 来远程渲染 <code>crostini</code> 中的 <code>x11docker</code>.</p></blockquote><h2 id="在窗口里运行-Window-Manager-或-Desktop-Environment"><a href="#在窗口里运行-Window-Manager-或-Desktop-Environment" class="headerlink" title="在窗口里运行 Window Manager 或 Desktop Environment"></a>在窗口里运行 Window Manager 或 Desktop Environment</h2><p>一直有想法在运行 chrome OS 桌面的同时运行其他桌面，X11docker 是个选择不过 <code>weston</code> 效率不是很高而且 <code>docker</code> 可以理解为易失性存储器。<br>一次逛 Reddit 无意间发现了使用 <code>Xephyr</code> （a nested X server that runs as an X application）的 <a href="https://www.reddit.com/r/Crostini/comments/ean9du/running_a_window_manager_i3wm_on_stock_chrome_os" target="_blank" rel="noopener">帖子</a>，折腾了一下发现效果相当好！</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">alias</span> starti3<span class="token operator">=</span><span class="token string">'unset DBUS_SESSION_BUS_ADDRESS &amp;&amp; unset XDG_RUNTIME_DIR &amp;&amp; Xephyr -br -ac -noreset -screen 1920x1080 -dpi 150 -resizeable :2 >/dev/null 2>&amp;1 &amp;; sleep 1s &amp;&amp; DISPLAY=:2 i3 >/dev/null 2>&amp;1 &amp;'</span><span class="token function">alias</span> exiti3<span class="token operator">=</span><span class="token string">'pkill Xephyr &amp;&amp; pkill i3'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>主要需要注意的就是需要创建并使用新的 D-BUS session，否则在 <code>i3wm</code> 中打开的窗口不会运行在 <code>i3wm</code> 里面而是跑出去了，因为它们依赖 DBUS，错误的使用原来的 DBUS 回话打开了窗口。所以需要在新回话之前 unset 掉所有 DBUS 有关的环境变量。</p></blockquote><p>其实是在 <code>i3wm</code> 中因为缺少 DBUS 有关环境变量，会导致依赖它们的程序运行不正常（e.g. 搜狗拼音），所以需要 <code>export $(dbus-launch)</code> （可以直接放到 <code>~/.config/i3/config</code> 里面）导出一下。</p><p>其次，我发现 <code>crostini</code> 中的 <code>sommelier</code> 会劫持一部分的快捷键来匹配 chrome OS 的行为，比如 <code>super_L</code> (a.k.a. <code>meta</code>) 键，Alt+<code>-</code> (最小化窗口)，Alt+<code>+</code> （最大化窗口），Alt+<code>[</code> （左半分屏），Alt+<code>]</code> (左半分屏)，etc. 所以要想在 <code>i3wm</code> 中使用 <code>Alt+1</code> 这样的快捷键，需要修改一下 <code>sommelier</code> 配置（[参考]（<a href="https://old.reddit.com/r/Crostini/wiki/enable-chrome-shortcuts-in-linux-apps)：" target="_blank" rel="noopener">https://old.reddit.com/r/Crostini/wiki/enable-chrome-shortcuts-in-linux-apps)：</a></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p ~/.config/systemd/user/sommelier@.service.d/<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span>EOF <span class="token operator">></span> ~/.config/systemd/user/sommelier@.service.d/cros-sommelier-override.conf<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Environment<span class="token operator">=</span><span class="token string">"SOMMELIER_ACCELERATORS=&lt;Alt>minus,&lt;Alt>equal"</span>EOF<span class="token function">mkdir</span> -p ~/.config/systemd/user/sommelier-x@.service.d/<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span>EOF <span class="token operator">></span> ~/.config/systemd/user/sommelier-x@.service.d/cros-sommelier-x-override.conf<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Environment<span class="token operator">=</span><span class="token string">"SOMMELIER_ACCELERATORS=&lt;Alt>minus,&lt;Alt>equal"</span>EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>然而 <code>Alt+Tab</code> 还是默认被 chrome OS 的 Ash WM 劫持的，（似乎）无法通过上述配置文件修改。</p></blockquote><p>测试 <code>i3wm</code> 的时候还是发现 <code>meta+1</code> 这样的组合键有问题，用 <code>xev</code> 测试发现 <code>meat+1</code> 识别成了 <code>super_L + F1</code>, 研究了一会儿最后决定直接把 <code>$mod</code> 改成了 <code>Alt</code> 一劳永逸hhhh。</p><p>现在还有点小问题，<code>F3</code> 全屏之后 <code>i3wm</code> 的大小还是原来的大小。</p><p>全家福：</p><p><img src="/assets/chromefy/Xephyr_i3wm.png" alt="i3wm"></p><blockquote><p> 不管是 <code>crostini</code> 还是 <code>crouton</code> 都可以用本小节方法在窗口中运行新的 <code>X server</code>。</p></blockquote><h2 id="无痛-A-B-升级-Chrome-OS"><a href="#无痛-A-B-升级-Chrome-OS" class="headerlink" title="无痛 A/B 升级 Chrome OS"></a>无痛 A/B 升级 Chrome OS</h2><p>主要使用: <a href="https://github.com/DCMMC/chrome_os_updater" target="_blank" rel="noopener">chrome_os_updater</a></p><p>前提是需要 <code>EFI-SYSTEM</code>, <code>ROOT-A</code>, <code>ROOT-B</code> 三个 partlabel 的分区.</p><p>可以使用在 Chrome OS 上升级系统到另外一下分区, 同时修改 grub.cfg.</p><p>原 repo 直接覆盖了 EFI 分区, 这样对于多系统有影响, 所以 fork 下来略微修改了一下.</p><h2 id="fcitx5-使用"><a href="#fcitx5-使用" class="headerlink" title="fcitx5 使用"></a>fcitx5 使用</h2><p>在 wayland 原生 gtk 应用中使用 <code>fcitx5</code> 会出现无法显示候选列表框的问题，这是因为没有 wayland IM module 或者应用不兼容输入法，在 kde 或者 gnome 中可以使用 <code>kimpanel</code>。</p><p>而 crostini 并没有 DE，总之很多坑，目前并没有完美的解决方法。</p><p>所以只能为这些应用单独开一个 X 给他们：</p><pre class="line-numbers language-bash"><code class="language-bash">sommelier -X <span class="token operator">&lt;</span>executable file<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于 sublime, 发现用 sommelier -X 无法启动，不过加入 debug 参数 <code>sommelier -X subl --debug</code> 就可以。</p><p>不过使用时整体渲染感觉会卡一点。</p><h1 id="Changelog"><a href="#Changelog" class="headerlink" title="Changelog"></a>Changelog</h1><h2 id="2019-12-20"><a href="#2019-12-20" class="headerlink" title="2019-12-20"></a>2019-12-20</h2><p>加入使用 <code>Xephyr</code> 运行 <code>i3wm</code> 有关内容。</p><h2 id="2019-12-12"><a href="#2019-12-12" class="headerlink" title="2019-12-12"></a>2019-12-12</h2><p>加入 VBox 和 Termina 冲突有关的内容, 以及 <code>rkt</code> 和 <code>x11docker</code>.</p><h2 id="2020-04-12"><a href="#2020-04-12" class="headerlink" title="2020-04-12"></a>2020-04-12</h2><p>加入无痛升级的脚本</p><h2 id="2020-05-17"><a href="#2020-05-17" class="headerlink" title="2020-05-17"></a>2020-05-17</h2><p>加入 fcitx5 使用。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chromebook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BitCoding流量分类笔记</title>
      <link href="/2019/10/05/2019-10-05-bitcoding-liu-liang-fen-lei-bi-ji/"/>
      <url>/2019/10/05/2019-10-05-bitcoding-liu-liang-fen-lei-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="Traffic-Classification"><a href="#Traffic-Classification" class="headerlink" title="Traffic Classification"></a>Traffic Classification</h2><h3 id="BitCoding"><a href="#BitCoding" class="headerlink" title="BitCoding"></a>BitCoding</h3><p>Ref: <a href="http://doi.org/10.1109/TNET.2018.2868816" target="_blank" rel="noopener">BitCoding: Network Traffic Classification<br>Through Encoded Bit Level Signatures</a></p><blockquote><p>CCF A，TON</p></blockquote><h4 id="Main-Idea"><a href="#Main-Idea" class="headerlink" title="Main Idea"></a>Main Idea</h4><p>DPI 依靠专家经验来使用 payload 部分的字节级签名（byte-level signatures）作为应用层的分类规则，<br>然而现在越来越多的应用开始使用二进制位级信息（bit-level information）来编码其应用协议。<br>作为 DPI 的改进，BitCoding 使用基于 DPI 的二进制位签名（bit-level DPI-based signature）来作为分类依据。<br>BitCoding 只取 payload 的前面一小部分比特位作为签名，并且将签名压缩编码并转换为受限的计数自动机。</p><blockquote><p>BitCoding 是 flow-based 的而不是 packet-based 的方法。</p></blockquote><p>主要分为以下几个步骤：</p><ul><li>Bi-directional flow reconstruction</li></ul><p>按照 <code>(SrcIP, DstIP, SrcPort, DstPort, Protocol)</code> 这个 5-tuple 和 TCP/UDP 的一些特征提取特定应用的数据流（traffic flow）用于训练和测试。</p><ul><li>Bit signature generation</li></ul><blockquote><p>公式跟原文表示有点出入</p></blockquote><p>假定训练集中对某一个应用共有 $K$ 个 flow，每一个 flow 的前 $n$ (e.g. 20) bits 就表示其签名，所以签名集 $A_{sig} = \{ \{f_{i,j} | 1 \le j \le n \} | 1 \le i \le K \}$. e.g. $\{11101, 11011, 11001\}$ 就是 3 个 flow 的签名集合。</p><blockquote><p>Tips: 原来 mathjax 里面连续两个 <code>\\{</code> 要用空格隔开并且要两边斜杠来转义, 除了 <code>这种</code> 之外的地方星号都要转义, <code>_</code> 要一遍斜杠转义</p></blockquote><p>应用的签名表示为 <code>s = [(1 if sum(A_sig[:, i] == K else 0 if sum(A_sig[:, i] == 0 else &#39;*&#39;) for j in range(n)]</code> (类 Python 语法).</p><ul><li>Run-length Encoding</li></ul><p>上述应用签名长度为 $n$ 位三进制，使用 RLE 这种 naive 的无损压缩方式，具体地说，$n$ 个连续的 $1, 0, *$ 分别表示为 $nW, nZ, n*$.</p><ul><li>State Transition Machine Creation</li></ul><p>RLE 进一步转化为一个受限的有限计数自动机（Transition Constrained Counting Automata, abbr., TCCA)。</p><p>其实就是一种魔改版的 DFA。。或者说是一种 regexp 子集。</p><blockquote><p><code>8W8Z3*3W</code> 其实就是 regexp <code>1{8,8}0{6,6}[01]{3,3}1{3,3}</code></p></blockquote><p>形式化表示为：$\mathcal{M} = (Q, \Sigma, C, \sigma, q_0, F),$ w.r.t. $Q$ is finite set of input symbols, $\Sigma$ is finite set of input symbols, $C$ is finite set of counters, $q_0 \in Q$ is initial state, $F \subseteq Q$ is final state set, $\sigma$ is the set of transitions, 并且 $\sigma_i \in \sigma, \sigma_i = (q_i, q_j, c, \phi(c_i), Inc(c_j))$, w.r.t. $q_i$ is current state, $q_j$ is next state, $c_i$ is current count, $\phi(c_i)$ is the (invariant) constraint on counter value $c_i$, $Inc(c_j)$ is a function that assign the $c_j$ to a new value.</p><blockquote><p>形式化表示看起来复杂，结合原文的 Fig. 4 很好理解，并且原文 Fig. 4 有一些错误。</p></blockquote><h4 id="解决签名重叠（冲突）"><a href="#解决签名重叠（冲突）" class="headerlink" title="解决签名重叠（冲突）"></a>解决签名重叠（冲突）</h4><p>虽然很短的签名能够减少计算的 overhead，但是这会带来不用应用的签名相同的问题（类似哈希冲突）。<br>这可以通过增加 $n$ 的大小减少冲突（naive 的思路），原作者采用修改版的 Hamming Distance 来衡量两个签名之间的距离（Relaxed Hamming Distance)。</p><blockquote><p>Hamming Distance 计算相同长度的字符串中不同的位数，而 $*$ 表示为 0 或 1，所以 Relaxed Hamming Distance 位于含有 $*$ 的位不算作不同。</p></blockquote><p>所以只需要对 Hamming distance 太小的应用的签名长度增加便可以提高分类精度。</p><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><ol><li>包头这个方法考虑过吗：</li></ol><blockquote><p>原文只是利用 header 来讲应用的 traffic flow 提取出来，i.e. Bi-directional flow reconstruction 部分。而 TCCA 的创建不使用 header，而且其实 header （Ethernet/IP层) 部分大部分都是协议版本，Port，IP，MAC 之类的固定信息，这些信息在应用层要么都是一样的要么我们的论文预处理的时候会屏蔽掉它们。</p></blockquote><ol start="2"><li>K 越大，相同位置得到 $*$ 的概率也有越大，导致 TCCA 自由一个节点，那么所有流都会走到终止状态？</li></ol><blockquote><p>作者采用 <strong>Relaxed</strong> Hamming Distance 并且增长签名长度来避免这种情况。</p></blockquote><ol start="3"><li>RHD 具体如何解决冲突问题？</li></ol><blockquote><p>前面有讲解。</p></blockquote><h3 id="Feature-Fusion"><a href="#Feature-Fusion" class="headerlink" title="Feature Fusion"></a>Feature Fusion</h3><p>Ref: <a href="https://doi.org/10.1145/3326285.3329053" target="_blank" rel="noopener">Encrypted Traffic Classification of Decentralized Applications on Ethereum using Feature Fusion</a> (IWQoS, CCF B)</p><h4 id="Main-idea"><a href="#Main-idea" class="headerlink" title="Main idea"></a>Main idea</h4><p>对以太坊上的分布式应用的加密流量进行分类，本文主要是提出了一种新的急于 <strong>特征融合的特征提取方法</strong>，并且在一个自己收集的真实数据集（该数据集已开源）上实验。</p><p>因为以太坊中的分布式应用使用统一的区块链平台，所以其加密流量的 SSL/TLS 实现是一模一样的，之前使用实现上的差异作为特征的方法已经不适用。</p><blockquote><p>参考 [1] 使用 TLS Handshake Metadata 作为特征，这些特征包括 client 支持的 cipher set （e.g. encryption algorithm and pseudorandom function）和 TLS extensions set。 不同平台（mobile or desktop）和不同实现 （e.g., chrome Boring SSL, firefox NSS，病毒使用的标准库 OpenSSL）的上述 SSL fingerprint 差异很大。</p></blockquote><h4 id="Dataset"><a href="#Dataset" class="headerlink" title="Dataset"></a>Dataset</h4><p>Network flow 导出为 CSV 格式，每一行为 packet 的信息，包括：时间戳，src/dst IP, ports, protocols, 包长度和 TCP/IP flags.<br>总共 15 种分布式应用, 收集时间为 50 天, 总共 18242 条 flow (包含百万级数量的包).</p><blockquote><p>本文定义 flow 为 (src/dst ip, src/dst ports) 相同的 packets.</p></blockquote><h4 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h4><ul><li>基于 SSL/TLS 消息类型的 Markov Model.</li></ul><p>使用 compact notation 来表示 SSL/TLS 会话的消息类型 (e.g., 22:2 represents <code>Server Hello</code> ), 一个状态可以是 SSL/TLS 消息类型, 或者同一个 TCP segment 传输的 SSL/TLS 消息类型序列, 据此构造一个 Markov Model.</p><blockquote><p>因为以太坊平台中所有分布式应用的 SSL/TLS 消息类型行为都一致, 所以上述方法难以区分不同应用.</p></blockquote><ul><li>基于包长度的统计特征</li></ul><p>三种方向(income, outcome, bi-direction) 的包的 18 种统计信息 (minimum, maximum, mean, median absolute deviation, standard deviation, variance, skew, kurtosis, percentiles (from 10% to 90%) and the number of elements in the series).</p><blockquote><p>在以太坊分布式应用加密流量中此类信息的判别性能 (discrimination) 不是很好.</p></blockquote><ul><li>Merging features</li></ul><p>除了上述两种特征之外, 还可以使用 time series 和 packets bursts 这样的 (变长) 多维特征.</p><p>burst 是 TCP flow 中传输连续的多个相同方向 (src -&gt; dst or dst -&gt; src) 的包.</p><p>bursts 的统计特征包括 burst size (包数量) 和 burst length (burst 中所有包的 payload 长度之和).</p><p>bursts 统计特征 和  time series 同样也可以使用类似 packets lengths 的统计信息, 包含两个方向: ingress, egress, bi-direction. ( burst 只用了前两种方向: $2 \times 2 \times 18 = 72$, time 包含三个方向: $3 \times 18 = 54$ )</p><blockquote><p>merging features 中 packet length 还包括三个方向的包的总数作为 feature</p></blockquote><blockquote><p>实验结果: packet length: 79%, burst: 82%, time series: 78%, 三者简单合并 (merge): 85%.</p></blockquote><ul><li>Select important features of merging features</li></ul><p>使用随机森林中的 Gini importance metric, 筛除掉分数低于 0.15% 的, 183 个 features 减少为 166, RF 实验结果只提高 0.54%.</p><h4 id="overview-of-feature-fusion"><a href="#overview-of-feature-fusion" class="headerlink" title="overview of feature fusion"></a>overview of feature fusion</h4><p>$f = [Plen, Ptime, Brust]$</p><p>Kernel function:</p><p>$K(x, x^{\top}) = \phi(x) \phi(x^{\top})$</p><blockquote><p>$x \subset \mathcal{R}^{n \times 1}$</p></blockquote><ul><li>polynomial kernel function:</li></ul><p>$K(x, x^{\top}) = (x * x^{\top} + 1)^d$</p><blockquote><p>$d \in \mathcal{N}^{+}$</p></blockquote><ul><li>radial basis function</li></ul><p>$K(x, x^{\top}) = \exp(- \frac{\lVert x - x^\top \rVert^2}{2 \sigma^2})$</p><blockquote><p>$\sigma \in (0, 1)$</p></blockquote><p>对 Plen, Ptime 和 Burst 分别使用核函数之后把原来各有 $i, j, k$ 个元素变为 $i*i, j*j, k*k$ 个元素 (并且会展平为一维).</p><blockquote><p>$i, j, k$ 在本文中为 $57, 54, 72$</p></blockquote><p>特征选择:</p><p>暴力枚举 2 到 183 种特征来确定最重要的特征数 $n$ 的选择计算复杂度过高, 论文使用 random forest 中的 Gini index 作为特征重要性测量方法.</p><p>$VIM^{gini}_{jm} = GI_m - GI_l - GI_r$</p><blockquote><p>$GI_i = 1 - \sum_{k=1}^{K} p_{mk}^2$, $p_{mk}$ 表示应用 $k$ 在结点 $m$ 中的百分比, $l$ 和 $r$ 表示 $m$ 的左右子节点.</p></blockquote><blockquote><p>$VIM_j$ 为特征 $j$ 的重要性, 共 $K$ 个 特征 $X_1, \cdots, X_C$</p></blockquote><p>当 $X_j$ 出现在树 $i$ 的结点中 (这些结点集为 $M$), $X_j$ 对树 $i$ 的重要性为:</p><p>$VIM_{ij}^{gini} = \sum_{m \in M} VIM_{jm}^{gini}$</p><p>随机森林中共 $n$ 棵决策树:</p><p>$VIM_{j}^{gini} = \sum_{i=1}^n VIM_{ij}^{gini}$</p><p>归一化一下:</p><p>$VIM_j = \frac{VIM_j}{\sum_{i=1}^c VIM_i}$</p><p>排序这些特征重要性之后, $n$ 个特征的贡献衡量为:</p><p>$CFC_n = \sum_{i=1}^n VIM_j \times \frac{1}{n}$</p><blockquote><p>CFC 在我看来毫无意义, VIM 高的特征的共享当然高, 但是 CFC 的值跟分类结果无关</p></blockquote><h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><p>具体看论文, Random Forest 对比其他两种 (kNN, SVM) 效果好很多, 感觉 classifer 的选择甚至比 feature 的选择效果更加明显</p><h4 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h4><p>[1] Machine Learning for Encrypted Malware Traffic Classification: Accounting for Noisy Labels and Non-Stationarity</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
            <tag> 网络流量分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推免回顾</title>
      <link href="/2019/09/21/2019-09-21-tui-mian-hui-gu/"/>
      <url>/2019/09/21/2019-09-21-tui-mian-hui-gu/</url>
      
        <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>这段时间一直在忙着参加各个学校的保研推免，现在终于算是闲下来了，准备随便写写保研推免的回顾和总结。因为本人保研推免参加的不是很多，而且也没有过什么惊心动魄的经历，再加上自己还比较菜，这里写下的内容仅仅只是一份回忆，不太具有参考价值。因为我 6 月 15 左右才申请的，申请的太晚了，所以申请的少同时有资格去的夏令营也很少。读研就是希望逃避下工作，暂时有多点时间自己努力多学点东西，扎实一下自己。</p><h2 id="南方科技大学"><a href="#南方科技大学" class="headerlink" title="南方科技大学"></a>南方科技大学</h2><p>作为夏令营的第一站，南科大确实是我体验最好的夏令营了。报销车费和酒店住宿费，送太阳伞，餐票，背包之类的，并且宣讲和面试的场外还有各种点心，饮料和水果，老师也都超级温柔和蔼，遗憾的是从我们这一年开始南科大硕士不是发的哈工大的毕业证了。第一天所有院一起听陈十三校长的演讲，可以感觉到南科大的氛围还是真心不错，而且很多院士（30多个其中 10 多 20 个专职），不过南科大主要在化学和生物方面厉害。下午本院宣讲，来了几个老师，系主任姚新大佬真的很随和，对本系没有任何尬夸，说的很实在甚至自黑了一把，然后还有其他几个老师都很厉害也很温柔，今年和明年会来很多新老师，大多都是海归甚至那边的终身教授。其中我对一个做迁移学习的 <a href="https://yuzhanghk.github.io/" target="_blank" rel="noopener">张宇老师</a> 比较感兴趣，看了他的一篇用类似 LSTM 的 gate 思想做迁移学习的，觉得听有意思的，面试完之后特地找他聊了下并拿到了 offer。专业笔试的时候基本是英文题，有数据结构，操作系统，计算机网络和离散数学，基本我也就还记得大部分的数据结构的东西，别的都忘记了。。参观实验室的时候，我感觉南科大的氛围确实是很好的，而且资源也不错，有个做硬件的实验室一直在做无人机，机器人和自动驾驶之类的，而且竟然好几个 RA （Research Assistant）都是本科生。。有个实验室他们开发了一个基带芯片 RoLa，魔改了一下协议栈，功耗低了 50%，可以说是相当实用了。面试的时候，分三轮，每轮大概几分钟，两个老师。第一轮人文素养面试就是自我介绍，然后 <a href="http://cse.sustc.edu.cn/cn/people/view/people_id/96/sort_id/9/pid/" target="_blank" rel="noopener">刘佳琳</a> 老师问了些比较棘手的生活问题，比如老师给的方向做不下去之类的，或者是延毕之类的怎么办hhh。第二轮问了些专业课，数据结构之类的，都比较开放，比如搜索可以用哪些数据结构以及复杂度子类的。第三轮做一个能够让他们觉得非要我不可的自我介绍，我提到了我是 self-motivated 的学生得到了<a href="http://cse.sustc.edu.cn/cn/people/view/people_id/109/sort_id/9/pid/" target="_blank" rel="noopener">宋轩</a> 和另外一个老师的好评hhh，然后问了些有关论文的东西。没想到最后我竟然拿了个面试第一hhh。最后综排第一名是我接触的一个南科大的学生，感觉南科大本科的教育是真的不错，很多课直接用的国外名校的讲义，例如数据结构学的是 UCB 的课，而且上课模式也类似美国学校，重 midterm 和 各种 homework/projects。</p><p>最后我记得我最先联系的是<a href="http://cse.sustc.edu.cn/cn/people/view/people_id/111/sort_id/9/pid/" target="_blank" rel="noopener">高汝霆</a> 老师，老师很温和，上来就给我劝退了一波语音 NLP，不过说的确实有理，应用范围还比较窄。不过老师最近在用 NLP 做教育类软件，老师自己用 unity 做的 Android 游戏还蛮好玩的，我还跟他一起玩了几把哈哈哈。</p><blockquote><p>记得负责行政的一个带队老师说南科大本科学生还是太骄傲了hhh，夏令营放了很多南科大的学生来，但是很多其实是没有推免名额的，只不过是让他们有种参与感hhh。</p></blockquote><h2 id="北京师范大学"><a href="#北京师范大学" class="headerlink" title="北京师范大学"></a>北京师范大学</h2><p>北师大夏令营安排的超级紧凑，所有的活动全部放在一天完成，而且也没啥实验室参观或者食堂吃饭什么的，我觉得可能是担心跟后一天的北航，中科院网络所的夏令营冲突hhh。上午先专业英语笔试，主要是一些专业课的词汇，然后是英译汉，汉译英，都是深度学习和 VR 之类的东西，小 case。笔试完紧接着就是 acm 机试，6 道题只有第一道是签到题，标准的 acm 题和 oj。所以我这样的菜鸡，果不其然只 A 了第一题，有道很简单的最大最小堆的实现也搞了半天没做出来。。不过我  A 地快，没想到最终拿到了第 6（第一名 AK 了）。。下午更加骚，专业考试跟面试同时进行，专业考试好像是数据结构，离散数学，计算机网络之类的题。然后笔试到一半会被叫去面试，面试十分钟吧，六七个老师，首先老师用英文交流了几个简单的问题，比如为什么选择来北师大，觉得北京有什么优势，介绍家乡之类的。然后自己介绍自己的一个论文或项目，我对论文比较熟悉，老师问了下论文花了多久之类的，夸了下我能在这么短时间完成挺厉害的。</p><p>最后无聊跟夏令营认识的朋友去中科院网络所玩了下，然后还在中科院网络所提供的豪华宾馆里面碰到了去北航面试的一个东北大学的朋友，没想到后面在清华九推机试的时候再次碰到了他，太巧了。</p><p>最后说下北师大的计算机确实比较弱，而且原来院长是做考古修复的，现在大部分也是做脑神经之类的应用类方向。不过北师大地理位置不错，西二环附近，北邮和北航旁边，校园也很大。</p><h2 id="清华深研院"><a href="#清华深研院" class="headerlink" title="清华深研院"></a>清华深研院</h2><p>今年机试（9月15）是跟外校直博本部计算机还有本部网研院的人一起机试的，共总三道题，都是中档或者说简单 acm 题目，3 道题给的内存都特别大 $512M$，第一道是一个我没看懂题意的题，不过直接给了目标，就是去实现一个 $f(n,k) = \left(\sum_{i=0}^{n} i^k\right)^2 = \left( \sum_{i=0}^{k+1} A_i n^i \right)^2$, 并且有一个问题就是 $n$ 和  $k$ 都是大数（$10^9,10^5$ 这种），需要对结果取模 $10000007$， 然后题中给了两个解法，有一个解法就是用拉格朗日插值法这样就可以有很多除法了，这里主要是大数运算。第二题是一个比较简单的字符串问题，$ADD \ [k] \ [A]$ 操作可以向可重集合 $S$ 里面添加 $A$ 的所有长为 $k$ 的子串，然后 $QUERY \ [B] \ [C]$ 查询 $|{ A \le s \le B | s \in S}|$，这里有一个难点就是 $S$ 会特别大。第三题是一个图论题，给定所有顶点的度，问是否存在一个这样的简单无向图，如果有输出任意一种的边数和所有边的顶点对，否者输出 $-1$，我只知道一些类似偶数，$[n-1, n(n-1)]$ 之类的约束条件，只尝试了使用 Greedy 思想，然后还加了个判断是否为连通图，结果还是 WA。。机考用的是清华 acm 协会写的土豆 OJ，虽然有些 bug，不过 Material Design 好评，而且是按点给分，从简单到复杂一般每道题有五六组 test cases，而且每一组 case 是按照 acm 风格（i.e., AC 或者 WA 这样的），所以像我这样的菜鸡还是能拿点分数，最后 OJ 上我们自己看到只有自己一个人的排行榜，这样也许会心态好点hhh，而且提交之后看到的分数是预测试的分数，那些 invisible 的 test cases 才是真正给分的，比如好多人就是第三题全输出 $-1$ 就 $100$ 分了，其实你懂的，笑死。虽然我很菜 300 分估计只有 75 左右，不过 acm 选手跟非 acm 选手差距确实是蛮大的，问了下隔壁中南大老哥是 300 之外，两个东北大学的同学都是 50 多，70 多这样的，吉林大学的同学也是 120 （两个吉大的同学真惨都没过，我觉得他们应该是因为本校小班制，教务处太坑只提供班级排名导致他们排名看起来太低了。。）结果面试完听说机试的分数压根没有比例。。</p><blockquote><p>机试有个小插曲，我到了才发现原来可以带参考书。。我一个人空着手过去的，哭了。。而且我听师兄说去年三道全是动态规划，准备了快一周的动态规划，结果一道 dp 都没考。。</p></blockquote><p>清华的学硕越来越少了，而且大部分名额就是留给了本校推免的人，计算机直博在本部，专硕都在深圳。毕竟清华本科推免率 <code>80%</code>，可以最多挂一科，只要学分符合要求就行，不过在东主楼一楼的推研栏里面挂着一堆推免被驳回的申请hhh。而且本部直博生面试（9月16）当天晚上出不录取名单，没有拿到 offer 的人可以继续参加深研院复试（9月18），感觉深研院像备胎选择。面试的时候我是第五个，等了不到半小时就轮到我了，综合面试和专业面试是并行的，所以我先面的综合面试。综合面试大概 10 分钟，总共六七个本部的老师，他们都很和蔼，三分多钟英文自我介绍了一下，然后老师首先问了我一个英文问题，问我每一篇论文的 contribution 是什么，当时可能有点紧张，亦或者是老师问的话不太言简意赅，我听了两边都没听懂。。最后我把每篇论文大致描述了一下。后面老师就直接用中文面试了（不是因为我前面答得不好，所有人都应该是这样的），我原来按照要求准备的 6 份简历和论文都被收走给专业面试了，还好我多准备了些简历，老师按照简历上的内容问了几个问题，比如看我发了一篇论文问我为啥不来本部申请直博（我也想啊。。），顺便还夸了我有一篇论文的刊物影响影子很高hhh，然后问我为啥读硕士有没有打算读博之类的。专业面试先 PPT 展示五分钟，我准备的不充分，结果超时了，后面的项目经历部分只能一笔带过了。专业面试都是深研院的老师，系主任夏老师首先问了我一个有关离散数学里面等价类等价关系的定义，我忘记了，只能瞎答了。。其他都是问论文和实习有关的东西，很简单。期间有个老师看我简历说我有很多年 Linux 使用经验，问我有没有编译过 Linux hhh，那当然了，笑死。最后深研院九推面试 20 个 （只来了 19 个，包括 5 个 16 号直博没过的来参加调剂的）人过了 11 个，感觉比例跟网研院差不多，甚至我觉得网研院可能更加简单，网研院今年直博加直硕九推才 36 个人，最后估计招了 20 多个。</p><p>最后说个小插曲，申请表上面需要教务处盖章综合排名，不过那时候还没开始本校推免，搞了半天才盖了个章，而且教务处为了谨慎还特地注明推免还未开始。 中秋节前一天下午 5 点多深研院才发邮件通知我复试的事，说复试要带着本校的推免资格证明，然而我们学校 16 号才院内公示，教务处开推免资格证明更是还要等几天，而且明明这个推免时间表事基本全国都差不多的时间（除了清华本科之类的。。），这样确实很为难我们。最后 15 号上午交材料的时候，老师特别水，就说过几天记得补交就行。。</p><blockquote><p>P.S. 清青食堂二楼的麻辣香锅真的蛮好吃，就是需要厚着脸皮找本部学生借卡 (逃</p><p>芝兰自助餐厅的菜也不错，可以用支付宝，不过要加收 <code>15%</code>。</p></blockquote><h2 id="总结-（Tips）"><a href="#总结-（Tips）" class="headerlink" title="总结 （Tips）"></a>总结 （Tips）</h2><ul><li>Top 学校基本只有直博和专硕名额给外校推免生，学硕名额大部分是留给本校的，e.g. 清北，交大，南大这种。说到底是因为学硕是性价比最高的选项，上可继续直博，下可硕士就毕业。</li><li>保研推免应该尽早准备，越早越好。很多学校夏令营申请截止是六月上旬，而且每个学校的要求也不尽相同（e.g. 网上申请/邮寄，推荐信，申请表盖章，成绩单和排名证明）。而且最重要的还是在于提前联系好老师，并且争取多一些接触和有科研之类的合作。而且不管是夏令营还是九推，<strong>广撒网是相当重要的</strong>！</li><li>其实不管是夏令营还是九推，初筛的时候其实就是看本科学校，成绩排名，获奖和论文。有些甚至直接按照学校和排名机筛，所以 <strong>985 或者 211 + 高排名是开门砖</strong>。当然其实到了面试，论文和获奖才是最重要的，尤其是论文。而且在面试的时候，在短短 20min 左右的面试，也很难问出个所以然来，<strong>简历上的干货加上扎实的专业课在</strong>面试中很重要。</li><li>机考还是挺重要的，<strong>机考的题目一般不会是特别难的 acm 试题</strong>，要不就像北航那样有几道很简单的数据结构应用类的题，主要是要看懂题意，要不就是像清华那种 acm 简单或者中档题。不过机考依然需要提前好好准备，而且面试的时候很容易会问机考成绩。</li><li>导师和学校一直都是个纠结的问题，如果为了工作的话，确实要考虑清楚以后在哪里发展并且学校的牌子能够为找工作带来什么，自身能力的话当然靠不了学校也靠不了导师。导师的人品也是相当重要的，如果可以的话，<strong>降低一点学校的档次换回人品更好能力更强的导师</strong>（我就是没有这么多选择。。现在的导师真是一言难尽。。多搜下导师信息比如导师评价网）是相当好的。</li><li>清华深研院（大部分老师都水，倒是平台优势有跟腾讯 AI Lab 的合作子类的），清华网研院（在本部，竞争压力远小于计算机系和清华软件），中科院网络所（做的方向鱼龙混杂，网络所也有很多在做 DL），浙大软件（宁波有 IBM，两年制专硕培养方案超级水），北大软微都是比较水的，适合为了文凭而不看重能力的人。。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 推免 </tag>
            
            <tag> 研究生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chromebook 折腾记</title>
      <link href="/2019/01/25/2019-01-25-chromebook-zhe-teng-ji/"/>
      <url>/2019/01/25/2019-01-25-chromebook-zhe-teng-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>前段时间在知乎上看到 <code>立党</code> 发的一个关于 <code>Chromebook</code> 的回答, 据说 <code>Chromebook</code> 续航久, 重量轻, 性能凑合, 价格便宜, 还是 <code>Linux</code> 家族的 <code>chromeOS</code>. 本来对 <code>Chrome OS</code> 也有点兴趣🤔, 于是乎在咸鱼入手了一台 2014 年的 <code>Lenovo Thinkpad E11 Chromebook</code> (1st gen.). 配置如下:</p><ul><li>11.6 寸 720P(1366 x 768) 分辨率 <code>IPS</code> 十点触摸屏</li><li>16GB eMMC</li><li>4GB DDR3L 1333MHz RAM</li><li>Intel 赛扬 N2940 四核 1.92~2.25 GHz CPU (BayTrail 平台, 阉割了 <code>vmx</code> 指令集)</li><li>Intel 核显 (很差的性能, 好像用的是 Atom 系列的)</li></ul><p>到手之后测试了一下, 续航大概 <code>5hrs</code>, 原本标称 <code>10hrs</code>, 而且我特意选了太电池损耗差不多为 <code>0</code> 的本子. 不过重量和键盘都很满意, 最重要的是: 又多个台可以折腾的机器 :). 万恶的闭源 Chrome OS 对安卓的支持在这台本子上一直是 <code>Plan</code> 状态 (其实就是 <code>unsupport</code>), 其实在硬件上是可以跑安卓子系统的 (原理后面介绍), 只不过因为机器比较老, 按照 Google 的 <code>EndOfLife</code> 计划, 2019 年中就要停止对这台机器的支持了.</p><h1 id="安装-chromefy"><a href="#安装-chromefy" class="headerlink" title="安装 (chromefy)"></a>安装 (chromefy)</h1><p>因为直接用原生的 Chrome OS 没办法用安卓子系统, Google 了一番之后, <code>Github</code> 上有一个项目 <a href="https://github.com/imperador/chromefy" target="_blank" rel="noopener">chromefy</a>, 可以把开源的 <code>ChromiumOS</code> (开源的 <code>Chromium OS</code> 没有安卓子系统, 没有 <code>Cronsini</code>, 驱动支持不好, 缺少 Chrome OS 专属软件) 在保留内核及其驱动模块的基础上, 使用 <code>chromeOS</code> 的系统分区的内容. 基本原理很简单, 不过 Chrome OS 严格使用 <code>tpm</code> 芯片来加密文件系统, 我的设备只有 <code>tpm1</code> 芯片, 如果我用了 <code>tpm2</code> 的设备的系统作为系统分区的内容, 我还需要一个 <code>tpm1</code> 设备恢复镜像用来替换其中的 <code>tpm2</code> 加密程序为 <code>tpm1</code> 的.</p><p>所以我使用以下三个镜像来进行 <code>chromefy</code>:</p><ul><li><code>ArnoldTheBat</code> 的 <code>Special Build</code> 版本 ChromiumOS R72</li><li><code>pyro</code> (这个就是 <code>Thinkpad 11e Chromebook 4th gen.</code> ) 的 R70 恢复镜像作为系统分区内容</li><li><code>caroline</code> 的 R70 恢复镜像用来替换 <code>tpm2</code></li></ul><blockquote><p>恢复镜像在 <a href="https://cros-updates-serving.appspot.com/" target="_blank" rel="noopener">这里</a> 下载.</p></blockquote><p>本来用 <code>ArnoldTheBat</code> 的 R69, 我发现其内核中的驱动不支持我这台机器的屏幕旋转, 后面使用 R70 后就解决啦. Chromium OS 只提供分区布局 (Chrome/Chromium OS 的分区布局比较特殊, 很有意思, 里面准备了 两个(另加一个保留) Kernel 分区, 两个 Rootfs 分区, 用来在线更新系统, 写入到另外一个 Rootfs 和 Kernel 分区, 重启直接后切换到新系统, 以前 <code>小米 2SC</code> 手机也有这个特性, 很有意思☺️) 详情查看 <a href="https://www.chromium.org/chromium-os/chromiumos-design-docs/disk-format" target="_blank" rel="noopener">官方 Document</a> )</p><p><strong>Issues:</strong></p><ul><li>声卡问题，我的 <code>11e</code> 的声卡是 <code>byt-max98090</code> （BayTrail 平台的），结果 <code>chromefy</code> 后 <code>/proc/sounds</code> 和 <code>aplay -l</code>都是显示的是 <code>chtmax98090</code> （CherryTrail 平台），<code>/usr/share/alsa/ucm</code> 下面没有 <code>chtmax98090</code> 的配置但有 <code>byt-max98090</code> 的, 可以用 <code>alsaucm</code> 激活其配置, 但是最终还是没有声音. 准备用 usb 声卡算了.</li><li>屏幕旋转时好时坏, 不过可以识别出进入平板模式, 无伤大雅吧</li><li>稳定性不太好，容易 freeze，估计是 GPU 驱动问题，赛扬的芯片组和 GPU 跟 <code>Atom</code> 竟然是一样的， 坑 =，=</li></ul><h1 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h1><p>激活需要在 <code>Wifi 设置</code> 里面使用代理（可以用局域网内另外一台电脑开一个局域网代理), 科学上网对一个码农来说不是问题😂.</p><h1 id="安卓子系统"><a href="#安卓子系统" class="headerlink" title="安卓子系统"></a>安卓子系统</h1><p>因为型号太古老了, Google ChromeOS 并不打算为这台设备提供 <code>ARC++</code> 的支持, 不过好在折腾 Chromebook 的人还挺多的, 我很快找到了 <code>chromefy</code> 这个项目. 除了 ChromeOS, 国内的 ChromiumOS 衍生版 <code>FydeOS</code> 也可以支持安卓子系统, 不过驱动对我的机器不友好, 默认禁止 Google 账号, 默认不能使用任何 Chrome 扩展, 还有流量监控的嫌疑. 国外的 FlintOS, ArnoldTheBat, CloudReady 之类的 Chromium OS 自编译版本, 因为安卓子系统是闭源的, 受限于法律约束, 它们都不敢发布含有安卓子系统的版本. 天朝的公司倒是无视了这一点.</p><h2 id="ARC"><a href="#ARC" class="headerlink" title="ARC++"></a><code>ARC++</code></h2><p>说起这 <code>++</code>,  那么很明显有一个 <code>ARC</code>. Chrome 以前提供过一个叫做 <code>ARC</code> 的计划，用于解决 ChromeOS 上（离线和重量级）应用匮乏的问题, 最开始的 <code>ARC</code> 计划就是</p><p><code>ARC++</code> 的主要思路就是首先挂载一些重要的目录( <code>/proc</code>, <code>/storage</code>, <code>/sys</code> 等等), 创建好虚拟网卡, 然后使用 Linux Container 技术虚拟化一个 Android 环境 (一个完整的 Android 镜像, 见 <code>/opt/google/container/system.raw.img</code>).</p><blockquote><p>开源的 <code>Anbox</code> 的原理跟 <code>ARC++</code> 很相似, 都是容器化一个安卓系统镜像. 不过 <code>Anbox</code> 严重依赖 <code>snap</code> (进而依赖 <code>systemd</code> ), 并且因为是开源的项目, 所以没有 <code>arm</code> 指令集翻译 (这个最开始是 <code>Intel</code> 为 <code>Atom</code> 开发的, 商业闭源的). 而 <code>Arc++</code> 是内置 <code>x86_64</code> 到 <code>arm</code> 的指令集翻译.</p></blockquote><p><strong><code>Android Container</code> 的文档 <a href="https://chromium.googlesource.com/chromiumos/platform2/+/master/arc/container-bundle/README.md" target="_blank" rel="noopener">在此</a> 还有 <a href="https://lwn.net/Articles/701964/" target="_blank" rel="noopener">这里</a></strong></p><p>然而安卓子系统必须要点击 <code>Play Store</code> 图标初始化一次才能安装其他应用, 而这初始化, 因为安卓子系统用的是容器化技术, 网络也是隔离出来的一个虚拟网卡上的网络, 所以不会被外部的代理环境所影响. 这个 <strong>bug</strong> (feature) 可以参考 <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=654733" target="_blank" rel="noopener">chromium bugs</a> 这时候就会遇到 <strong>无法连接 Google Services</strong> 的问题:</p><pre><code>Couldn&#39;t connect with Google services.</code></pre><p><img src="/assets/chromefy/play_store_cannot_connect.png" alt="play_store_cannot_connect.png"></p><p>试了半天, 终于有一天不经意间发现了 chrome OS 的 shell 竟然有一个命令叫做 <code>android-sh</code>, 一看立马得到了转机:</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> android-sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>竟然 Android 容器的 shell (默认还是 <code>root</code> 权限, 赞!), 这个命令就是类似于 <code>adb shell</code>. 既然进入了 Android 容器的 shell, 我们就可以找办法设置网络代理了. 因为 R70 上的安卓子系统的 Android 7.1.1, 在 Android 7+ 上, 我们可以直接使用下列命令进行设置网络 http 代理:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># settings put global http_proxy &lt;http_address>:&lt;port></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>方法类似于激活系统的时候, 在局域网另外一台电脑开启局域网代理.</p></blockquote><p>能够连上 GMS 之后, 就可以进入 <code>Play Store</code> 啦, 而且这次初始化之后, 就不需要科学上网就能打开安装好的 Android 软件了.</p><p>运行 <code>Play Store</code> 效果图:</p><p><img src="/assets/chromefy/Play_Store.png" alt="Play Store"></p><p>跑个分, 击败了全球 <code>21%</code> 的设备😂:</p><p><img src="/assets/chromefy/antutu.png" alt="antutu.png"></p><p>Issues:</p><ul><li>窗口化的应用因为 gpu 驱动问题有时候很不稳定，容易造成 crash，<strong>全屏</strong> 之后好很多了. 怀疑是安卓应用和 native 应用画面混成（composition）的时候驱动没实现或者不稳定.</li></ul><h3 id="Root-和-Xposed"><a href="#Root-和-Xposed" class="headerlink" title="Root 和 Xposed"></a>Root 和 Xposed</h3><p><img src="/assets/chromefy/supersu.png" alt="supersu"></p><p>原理也挺简单的, 主要就是挂载一下 <code>system.raw.img</code> 镜像然后写入一个 <code>su</code>, 然后更改一下 <code>arc++</code> 的挂载点配置, 做一个链接之类的.</p><p>可以参考这里:</p><ul><li><a href="https://github.com/nolirium/aroc" target="_blank" rel="noopener">aroc</a></li><li><a href="https://nolirium.blogspot.com/2016/12/android-on-chrome-os-rooting-shell.html" target="_blank" rel="noopener">android-on-chrome-os-rooting</a></li><li><a href="https://nolirium.blogspot.com/2018/04/installing-xposed-in-android-on-chrome.html" target="_blank" rel="noopener">installing-xposed-in-android-on-chrome</a></li></ul><blockquote><p>免 Root 使用 Xposed 可以试试 <code>VirtualXposed</code></p></blockquote><h1 id="Crouton"><a href="#Crouton" class="headerlink" title="Crouton"></a>Crouton</h1><blockquote><p>官方出了个 <code>Crosini</code>，原理比 <code>Crouton</code> 更加复杂，<code>KVM</code> 虚拟化了一个最小 Linux 环境（包括运行了一个另外一个版本的 Linux 内核，理由是保证 chromeOS 的安全性/sandbox），然后在其上使用 Linux Kernel 的命名空间特性容器化了一个(多个） Linux 环境。因为 <code>N2940</code> 竟让把 <code>vmx</code> 指令集砍掉了（真的坑啊。。），所以 kvm 没法用。。<code>N3xxx</code> 就有 <code>vmx</code> 指令集。。。</p></blockquote><blockquote><p><code>KVM</code> 在 Linux 内核中默认不支持 <code>嵌套(nested) KVM 虚拟化</code>, 需要开启内核相关选项.</p></blockquote><p><code>Crouton</code> 就是一个 <code>chroot</code> + 自己实现了一个 <code>xorg server</code> 可以把 GUI 应用显示在 chrome tab 中的 <code>xiwi</code> + 自动挂载一些目录（tmp，~/Downloads…) + 剪贴板共享 + Audio （CARS）等等</p><p>来自 chroot 的缺陷 (弊端, 不能算 Issues):</p><p>• 因为只有 filesystem 级别的 isolate，所以进程 PID=1 已经被 chromeOS 的 <code>upstart</code> 占用而不能使用 <code>systemd</code> （可以使用容器技术解决，linux&gt;=3.10）<br>• 没办法创建虚拟网卡，所以 docker 无法使用（或者说只能工作在 <code>net=host</code> 上），可以尝试用 <code>rtk</code>（也是必须 net=host）<br>• 内核模块需要加载的话，因为没有 <code>linux-header</code>，所以必须去 chromium project 找到当前内核使用的那个源码树的那个 commit</p><p>Issues：</p><p>• <code>xorg</code> 下 Search(Meta) 键有时候会误以为是 cap lock，有点蛋疼<br>• <code>xiwi</code> 下 shift 容易触发更换输入法，当时在 crouton 的应用中会识别成大写。。</p><p>安装 <code>ubuntu bionic(18.04.1 LTS)</code> 后的 <code>chroot</code> 环境:</p><p><img src="/assets/chromefy/chroot_ubuntu.png" alt="chroot_ubuntu.png"></p><h2 id="xiwi"><a href="#xiwi" class="headerlink" title="xiwi"></a>xiwi</h2><p><code>xiwi</code> 打开的窗口如果无法输入任何东西，请检查一下你的代理（包括扩展应用 <code>ss-chromeapp</code> 和安卓子系统中的代理开启的 VPN（会直接映射到 chromeOS），关掉代理之后就可以了。</p><p><code>xiwi</code> 最近一次安装之后打开软件什么内容也没有，只有一片黑漆漆的内容，全屏一下就恢复了，不知道是不是新增加的 bug =，=。</p><p>Issues：</p><p>• 不能使用 chromeOS 的输入法，虽然可以键盘输入，所以需要在 Linux 中再安装一个输入法<br>• 截图的时候，截出来的图中类似 <code>Tilix</code> 的终端模拟器的画面会花屏，但是 sommelier 不会</p><p>弊端：</p><p>• 只能通过 chrome 扩展运行在 <code>tab</code> 里面, 虽然可以全屏, 但是系统级全局热键很影响体验, 比如 <code>Meta</code> 键默认是 <code>i3wm</code> 的修饰键, 所以最好采用 <code>xorg</code> 方式, <code>xorg</code> 和 chrome OS 的切换可以用 <code>shift</code> + <code>ctrl</code> + <code>alt</code> + <code>F1</code>/<code>F2</code>.</p><p>花屏现象, 默认会预装 <code>i3wm</code> 环境:</p><p><img src="/assets/chromefy/xiwi.png" alt="xiwi"></p><h2 id="sommelier"><a href="#sommelier" class="headerlink" title="sommelier"></a>sommelier</h2><p>这是 <code>Google</code> 为 <code>Cronsini</code> 打造的一个将容器(或者 chroot ) 中的 <code>X11</code> 和 <code>Wayland</code> 应用重定向到 chromeOS 的 <code>wayland</code> 服务中.</p><p>这可以使得容器中的 GUI 应用更加原生地运行在 chromeOS 上。</p><ul><li>没有 <code>GPU</code> 加速</li><li>兼容性没这么好，而且又是 wayland，稳定性就更加差了。 比如 firefox 就没法运行, wine QQ 运行也有问题。</li><li>一样无法使用 chromeOS 的输入法（还是安卓子系统大法好）</li><li>和原生窗口一模一样, 因为本身 chrome OS 的桌面就是工作在 <code>wayland</code>/<code>xorg</code> 上的, 所以比 <code>xiwi</code> 那种只能工作在 <code>chrome broswer tab</code> 里面的方式更加的自由.</li></ul><p>效果图:</p><p><img src="/assets/chromefy/sommelier.png" alt="sommelier"></p><h1 id="刷-BIOS"><a href="#刷-BIOS" class="headerlink" title="刷 BIOS"></a>刷 BIOS</h1><p><strong>TODO</strong></p><p>详见 <a href="https://mrchromebox.tech/#fwscript" target="_blank" rel="noopener">mrchromebox</a></p><blockquote><p>需要拆开电脑, 把主板上的一个螺丝拧下来就可以取消 <code>fireware write-protect</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chromebook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 使用 Travis-CI 持续集成</title>
      <link href="/2019/01/17/2019-01-17-hexo-shi-yong-travis-ci-chi-xu-ji-cheng/"/>
      <url>/2019/01/17/2019-01-17-hexo-shi-yong-travis-ci-chi-xu-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="使用-Travis-自动部署-Hexo-到-Github-Page"><a href="#使用-Travis-自动部署-Hexo-到-Github-Page" class="headerlink" title="使用 Travis 自动部署 Hexo 到 Github Page"></a>使用 <code>Travis</code> 自动部署 <code>Hexo</code> 到 <code>Github Page</code></h2><p>我的目标就是:</p><ul><li>博文用 <code>Markdown</code> 语法存储在 <code>MarkdownPosts</code> 中 ( <code>master</code> 分支)</li><li><code>Hexo</code> 项目存储在 <code>DCMMC.github.io</code> 的 <code>develop</code> 分支中</li><li><code>MarkdownPosts</code> 在 <code>DCMMC.github.io</code> 中作为 <code>submodule</code> 存在于 <code>./source/_posts</code> 中</li><li>当 <code>MarkdownPosts</code> 更新时自动更新 <code>DCMMC.github.io</code> develop 分支中的 submodule</li><li>当 <code>DCMMC.github.io</code> develop 分支更新时自动使用 <code>hexo</code> 进行构建和发布到 <code>DCMMC.github.io</code> 的 <code>master</code> 分支中</li></ul><h3 id="Sketch-Steps"><a href="#Sketch-Steps" class="headerlink" title="Sketch Steps"></a>Sketch Steps</h3><ul><li>进入 <a href="https://www.travis-ci.org" target="_blank" rel="noopener">https://www.travis-ci.org</a> 使用 Github 登录, 并将 <code>MarkdownPosts</code> 和 <code>DCMMC.github.io</code> 绑定上</li><li>去 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">Github Access Token</a> 创建一个 <code>Token</code>, 权限只开 <code>repo</code> 有关的就行</li><li>将 <code>Token</code> 记录在 <code>Travis</code> 中的这两个 repo 里面作为环境变量(记得不能公开), 用于在 <code>git push</code> 的时候作为 <code>OAuth</code></li><li>按照目标依次为两个 <code>repo</code> 创建 <code>.travis.yml</code> 文件(详细请见 <code>repo</code> 中有关文件)</li><li>测试并且调试一下就 <strong>Bingo</strong> 啦</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://juejin.im/post/596e39916fb9a06baf2ed273" target="_blank" rel="noopener">掘金博客</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 持续集成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博文 Markdown 格式说明</title>
      <link href="/2019/01/16/readme/"/>
      <url>/2019/01/16/readme/</url>
      
        <content type="html"><![CDATA[<blockquote><p>更新博文直接在本 <code>repo</code> 中更新就好了, 在 <code>DCMMC.github.io</code> 的 submodule <code>/source/_posts</code> 中更新的话,<br>要先 git pull origin master 同步一下, 然后再更新, 如果遇到被拒绝的情况, 那就先 <code>git checkout</code> 到一个合法<br>的版本的 <code>hashCode</code> 去</p></blockquote><h1 id="Notes-格式说明"><a href="#Notes-格式说明" class="headerlink" title="Notes 格式说明"></a>Notes 格式说明</h1><p>记得在每一个Markdown文件开头添加一下模板：</p><pre><code>---title:  &quot;博文标题&quot;date:   2019-01-16 10:42:06 +0800 # 时间author: Bill Kevin # 作者mathjax: true # 是否开启 mathjaxcategories: Test # 分类# 现在封面图片可以放在本 `repo` 的 `assets` 中辣img: /images/demo0.jpg # 封面图片(暂时在 /images 是在 /source/_posts/images 中)tags: # 标签(多个)  - Markdown---</code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx搭建Google镜像站点</title>
      <link href="/2017/10/23/2017-10-23-google-jing-xiang-zhan-dian-da-jian/"/>
      <url>/2017/10/23/2017-10-23-google-jing-xiang-zhan-dian-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="就是一步"><a href="#就是一步" class="headerlink" title="就是一步"></a>就是一步</h2><p>只需要配置一下Nginx, 实现代理就可以了:</p><p>具体的例子如下:</p><pre><code>server{    listen 80;    server_name example.com;    location / {        proxy_pass https://www.google.com;        proxy_connect_timeout 120;        proxy_read_timeout 600;        proxy_send_timeout 600;        send_timeout 600;        proxy_redirect    off;        proxy_set_header X-Real-IP $remote_addr;        # proxy_set_header Host $host;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    }}</code></pre><blockquote><p>P.S. 如果是二级域名 e.g. search.example.com, 记得去DNS域名解析供应商那里添加该解析记录.</p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 测试</title>
      <link href="/2017/09/01/2017-03-02-markdown-ce-shi/"/>
      <url>/2017/09/01/2017-03-02-markdown-ce-shi/</url>
      
        <content type="html"><![CDATA[<p>该文章用于展示markdown生成的格式。</p><p>插件 <code>hexo-markdown-assets-files</code> 测试:</p><p><img src="/assets/avatar.png" alt="测试"></p><p><strong>数学公式</strong></p><p>$$<br>\begin{eqnarray}<br>\nabla\cdot\vec{E} &amp;=&amp; \frac{\rho}{\epsilon_0} \<br>\nabla\cdot\vec{B} &amp;=&amp; 0 \<br>\nabla\times\vec{E} &amp;=&amp; -\frac{\partial B}{\partial t} \<br>\nabla\times\vec{B} &amp;=&amp; \mu_0\left(\vec{J}+\epsilon_0\frac{\partial E}{\partial t} \right)<br>\end{eqnarray}<br>$$</p><h1 id="Heading-1"><a href="#Heading-1" class="headerlink" title="Heading 1"></a>Heading 1</h1><h2 id="Heading-2"><a href="#Heading-2" class="headerlink" title="Heading 2"></a>Heading 2</h2><h3 id="Heading-3"><a href="#Heading-3" class="headerlink" title="Heading 3"></a>Heading 3</h3><h4 id="Heading-4"><a href="#Heading-4" class="headerlink" title="Heading 4"></a>Heading 4</h4><h5 id="Heading-5"><a href="#Heading-5" class="headerlink" title="Heading 5"></a>Heading 5</h5><h6 id="Heading-6"><a href="#Heading-6" class="headerlink" title="Heading 6"></a>Heading 6</h6><h4 id="标题（用底线的形式）Heading-underline"><a href="#标题（用底线的形式）Heading-underline" class="headerlink" title="标题（用底线的形式）Heading (underline)"></a>标题（用底线的形式）Heading (underline)</h4><h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2><h3 id="字符效果和横线等"><a href="#字符效果和横线等" class="headerlink" title="字符效果和横线等"></a>字符效果和横线等</h3><hr><p><del>删除线</del></p><p><s>删除线（开启识别HTML标签时）</s></p><p><em>斜体字</em>      <em>斜体字</em><br><strong>粗体</strong>  <strong>粗体</strong><br><strong><em>粗斜体</em></strong> <strong><em>粗斜体</em></strong></p><p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p><p><strong>缩写(同HTML的abbr标签)</strong></p><blockquote><p>即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启</p></blockquote><p>The <abbr title="Hyper Text Markup Language">HTML</abbr> specification is maintained by the <abbr title="World Wide Web Consortium">W3C</abbr>.</p><h3 id="引用-Blockquotes"><a href="#引用-Blockquotes" class="headerlink" title="引用 Blockquotes"></a>引用 Blockquotes</h3><blockquote><p>引用文本 Blockquotes</p></blockquote><p>引用的行内混合 Blockquotes</p><blockquote><p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href="http://localhost/" target="_blank" rel="noopener">普通链接</a>。</p></blockquote><h3 id="锚点与链接-Links"><a href="#锚点与链接-Links" class="headerlink" title="锚点与链接 Links"></a>锚点与链接 Links</h3><p><a href="http://localhost/" target="_blank" rel="noopener">普通链接</a></p><p><a href="http://localhost/" target="_blank" rel="noopener" title="普通链接带标题">普通链接带标题</a></p><p>直接链接：<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a></p><p><a href="http://www.this-anchor-link.com/" target="_blank" rel="noopener">锚点链接</a></p><p>GFM a-tail link @pandao</p><blockquote><p>@pandao</p></blockquote><h3 id="多语言代码高亮-Codes"><a href="#多语言代码高亮-Codes" class="headerlink" title="多语言代码高亮 Codes"></a>多语言代码高亮 Codes</h3><h4 id="行内代码-Inline-code"><a href="#行内代码-Inline-code" class="headerlink" title="行内代码 Inline code"></a>行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p><h4 id="块代码"><a href="#块代码" class="headerlink" title="块代码"></a>块代码</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token string">"Hello world!"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>预格式化文本：</p><pre><code>| First Header  | Second Header || ------------- | ------------- || Content Cell  | Content Cell  || Content Cell  | Content Cell  |</code></pre><h3 id="图片-Images"><a href="#图片-Images" class="headerlink" title="图片 Images"></a>图片 Images</h3><p>图片加链接 ( Image + Link )：</p><p><img src="/images/demo0.jpg" alt="测试"></p><hr><h3 id="列表-Lists"><a href="#列表-Lists" class="headerlink" title="列表 Lists"></a>列表 Lists</h3><h4 id="无序列表（减号）Unordered-Lists"><a href="#无序列表（减号）Unordered-Lists" class="headerlink" title="无序列表（减号）Unordered Lists (-)"></a>无序列表（减号）Unordered Lists (-)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4 id="无序列表（星号）Unordered-Lists"><a href="#无序列表（星号）Unordered-Lists" class="headerlink" title="无序列表（星号）Unordered Lists (*)"></a>无序列表（星号）Unordered Lists (*)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4 id="无序列表（加号和嵌套）Unordered-Lists"><a href="#无序列表（加号和嵌套）Unordered-Lists" class="headerlink" title="无序列表（加号和嵌套）Unordered Lists (+)"></a>无序列表（加号和嵌套）Unordered Lists (+)</h4><ul><li>列表一</li><li>列表二<ul><li>列表二-1</li><li>列表二-2</li><li>列表二-3</li></ul></li><li>列表三<ul><li>列表一</li><li>列表二</li><li>列表三</li></ul></li></ul><h4 id="有序列表-Ordered-Lists"><a href="#有序列表-Ordered-Lists" class="headerlink" title="有序列表 Ordered Lists (-)"></a>有序列表 Ordered Lists (-)</h4><ol><li>第一行</li><li>第二行</li><li>第三行</li></ol><hr><h3 id="绘制表格-Tables"><a href="#绘制表格-Tables" class="headerlink" title="绘制表格 Tables"></a>绘制表格 Tables</h3><table><thead><tr><th>项目</th><th style="text-align:right">价格</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td>计算机</td><td style="text-align:right">$1600</td><td style="text-align:center">5</td></tr><tr><td>手机</td><td style="text-align:right">$12</td><td style="text-align:center">12</td></tr><tr><td>管线</td><td style="text-align:right">$1</td><td style="text-align:center">234</td></tr></tbody></table><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr><th>Function name</th><th>Description</th></tr></thead><tbody><tr><td><code>help()</code></td><td>Display the help window.</td></tr><tr><td><code>destroy()</code></td><td><strong>Destroy your computer!</strong></td></tr></tbody></table><table><thead><tr><th style="text-align:left">Left-Aligned</th><th style="text-align:center">Center Aligned</th><th style="text-align:right">Right Aligned</th></tr></thead><tbody><tr><td style="text-align:left">col 3 is</td><td style="text-align:center">some wordy text</td><td style="text-align:right">$1600</td></tr><tr><td style="text-align:left">col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td style="text-align:left">zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table><table><thead><tr><th>Item</th><th style="text-align:right">Value</th></tr></thead><tbody><tr><td>Computer</td><td style="text-align:right">$1600</td></tr><tr><td>Phone</td><td style="text-align:right">$12</td></tr><tr><td>Pipe</td><td style="text-align:right">$1</td></tr></tbody></table><hr><h4 id="特殊符号-HTML-Entities-Codes"><a href="#特殊符号-HTML-Entities-Codes" class="headerlink" title="特殊符号 HTML Entities Codes"></a>特殊符号 HTML Entities Codes</h4><p>&copy; &amp;  &uml; &trade; &iexcl; &pound;<br>&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot;</p><p>X&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;</p><p>18&ordm;C  &quot;  &apos;</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
